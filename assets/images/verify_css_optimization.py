#!/usr/bin/env python3
"""
Script de verificaci√≥n de optimizaciones CSS render-blocking
Verifica que Bootstrap est√© cargado de forma as√≠ncrona en todos los archivos HTML
"""

import os
import re
import glob

def check_bootstrap_optimization():
    """Verifica la optimizaci√≥n de Bootstrap en todos los archivos HTML"""
    print("üéØ VERIFICACI√ìN CSS RENDER-BLOCKING OPTIMIZATION")
    print("=" * 70)
    
    html_files = glob.glob("../../*.html")
    
    optimized_files = []
    needs_optimization = []
    
    for file_path in html_files:
        file_name = os.path.basename(file_path)
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar si tiene preload de Bootstrap
        has_preload = 'rel="preload"' in content and 'bootstrap' in content and 'as="style"' in content
        # Verificar si tiene noscript fallback
        has_noscript = '<noscript>' in content and 'bootstrap' in content
        # Verificar si tiene render-blocking tradicional
        has_blocking = re.search(r'<link[^>]+href[^>]*bootstrap[^>]*rel="stylesheet"', content)
        
        print(f"\nüìÑ {file_name}:")
        
        if has_preload and has_noscript:
            print("  ‚úÖ Bootstrap optimizado (preload + noscript fallback)")
            optimized_files.append(file_name)
        elif has_preload:
            print("  ‚ö†Ô∏è  Bootstrap con preload pero sin noscript fallback")
            print("      Recomendado: a√±adir noscript para accesibilidad")
        elif has_blocking:
            print("  ‚ùå Bootstrap render-blocking (necesita optimizaci√≥n)")
            needs_optimization.append(file_name)
        else:
            print("  ‚ùì Bootstrap no encontrado o configuraci√≥n no est√°ndar")
    
    return optimized_files, needs_optimization

def check_other_css_blocking():
    """Verifica otros archivos CSS que podr√≠an estar causando render-blocking"""
    print(f"\nüîç AN√ÅLISIS DE OTROS CSS RENDER-BLOCKING")
    print("=" * 60)
    
    html_files = glob.glob("../../*.html")
    css_analysis = {}
    
    for file_path in html_files:
        file_name = os.path.basename(file_path)
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Buscar todos los links CSS
        css_links = re.findall(r'<link[^>]*rel="stylesheet"[^>]*>', content)
        preload_links = re.findall(r'<link[^>]*rel="preload"[^>]*as="style"[^>]*>', content)
        
        print(f"\nüìÑ {file_name}:")
        print(f"  üîó CSS tradicional (render-blocking): {len(css_links)}")
        print(f"  ‚ö° CSS preload (optimizado): {len(preload_links)}")
        
        if css_links:
            print("  üìã CSS render-blocking encontrados:")
            for link in css_links:
                href_match = re.search(r'href="([^"]+)"', link)
                if href_match:
                    print(f"    - {href_match.group(1)}")
        
        css_analysis[file_name] = {
            'blocking': len(css_links),
            'optimized': len(preload_links)
        }
    
    return css_analysis

def estimate_performance_impact():
    """Estima el impacto en el rendimiento de las optimizaciones CSS"""
    print(f"\nüöÄ IMPACTO ESTIMADO EN RENDIMIENTO")
    print("=" * 60)
    
    print("‚úÖ Beneficios de la carga as√≠ncrona de CSS:")
    print("  ‚Ä¢ Reducci√≥n del render-blocking time: ~470ms")
    print("  ‚Ä¢ Mejora en First Contentful Paint (FCP)")
    print("  ‚Ä¢ Reducci√≥n en Largest Contentful Paint (LCP)")
    print("  ‚Ä¢ Mejor experiencia de usuario en conexiones lentas")
    
    print("\nüîß T√©cnica implementada:")
    print("  ‚Ä¢ rel=\"preload\" + as=\"style\" + onload")
    print("  ‚Ä¢ Fallback <noscript> para accesibilidad")
    print("  ‚Ä¢ CSS se carga en paralelo sin bloquear render")
    
    print("\nüìä M√©tricas esperadas:")
    print("  ‚Ä¢ FCP: Mejora de ~300-500ms")
    print("  ‚Ä¢ Speed Index: Reducci√≥n significativa")
    print("  ‚Ä¢ Total Blocking Time: Disminuci√≥n notable")

def main():
    """Funci√≥n principal"""
    print("üé® VERIFICACI√ìN DE OPTIMIZACIONES CSS RENDER-BLOCKING")
    print("=" * 80)
    
    # Cambiar al directorio del proyecto
    os.chdir("../..")
    
    # Verificar Bootstrap
    optimized, needs_opt = check_bootstrap_optimization()
    
    # Verificar otros CSS
    css_analysis = check_other_css_blocking()
    
    # Mostrar impacto
    estimate_performance_impact()
    
    # Resumen
    print(f"\n‚ú® RESUMEN DE OPTIMIZACI√ìN CSS")
    print("=" * 60)
    print(f"‚úÖ Archivos con Bootstrap optimizado: {len(optimized)}")
    print(f"‚ùå Archivos que necesitan optimizaci√≥n: {len(needs_opt)}")
    
    if needs_opt:
        print(f"\nüîß Archivos pendientes de optimizaci√≥n:")
        for file_name in needs_opt:
            print(f"  ‚Ä¢ {file_name}")
    else:
        print(f"\nüéâ ¬°Todos los archivos tienen Bootstrap optimizado!")
    
    # Calcular total CSS render-blocking
    total_blocking = sum(analysis['blocking'] for analysis in css_analysis.values())
    total_optimized = sum(analysis['optimized'] for analysis in css_analysis.values())
    
    print(f"\nüìä ESTAD√çSTICAS GENERALES:")
    print(f"üîó Total CSS render-blocking: {total_blocking}")
    print(f"‚ö° Total CSS optimizado: {total_optimized}")
    
    if total_blocking == 0:
        print("üéØ ¬°EXCELENTE! No hay CSS render-blocking en el sitio")
    else:
        print("üéØ Oportunidad de mejora: Optimizar CSS restantes")

if __name__ == "__main__":
    main()
